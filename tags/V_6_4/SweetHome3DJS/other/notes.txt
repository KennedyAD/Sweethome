- Livraison : mettre à jour la version dans build.xml et tools/SweetHome3DJSDocTemplate/index.tmpl + class.tmpl + allfiles.tmpl + static/header.html
              {@linkplain} + {@link} avec 2 params ne fonctionnne pas   

- Révision de nettoyage de HomePane = r7435 

- Pour transpiler une classe de com.eteks.sweethome3d.j3d (par exemple Wall3D), ajouter ":com/eteks/sweethome3d/j3d" à la ligne suivant --includes dans build.xml, 
  ajouter "com.eteks.sweethome3d.j3d.*", "!com.eteks.sweethome3d.j3d.Wall3D" aux annotations "jsweet.lang.Erased" SweetHome3DJSweetAdapter.java
  et chercher la classe transpilée dans tools/JSweet/build/js/bundle.js

- Bug potentiel sur mauvaise optimisation dans JSweet
  Home.addPieceOfFurniture est surchargée et l'appel à cette méthode dans HomeXMLHandler s'effectue via la branche
  addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture
  au lieu de addPieceOfFurniture (probablement par optimisation)
  Conséquence : si addPieceOfFurniture est redéfini dans une sous-classe, l'appel précédent ne sera pas branché sur la méthode redéfinie :-(

- ATTENTION ! shape3d.getName() plutôt shape3d.getUserData() pour récupérer le nom des formes côté JS
- ATTENTION ! Revoir optimisation des appels à ModelManager#unloadModel() et HomeComponent3D#disposeGeometries() dans HomePreviewComponent 
  si on a besoin de la boîte englobante avec transformation dans ModelManager.computeBounds car les objets seront rechargés  
  (a priori juste pour le composant 3D dans la modif de matériau mais on doit pouvoir garder la BoundingBox3D en cache si la transformation est la même)
- Utiliser WeakMap ? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap
- Vérifier avec l'outil de profiling de Chrome si les instances de Home, HomePreviewComponent et HTMLCanvas3D sont bien libérées
- OBJMaterialNameGenerator à supprimer dans la version qui suivra la prochaine version de Sweet Home 3D avec OBJWriter modifié   
- Vérifier les classes / méthodes ignorées AspectRatio, BackgroundImage, HomeEnvironment, Home, CatalogPieceOfFurniture, CatalogTexture, Level
- Mettre à jour le test sur les portes et fenêtres dans HomeRecoder et dans HomePieceOfFurniture3D si ajout de la classe HomeDoorOrWindow

- Collections.emptyMap mal transpilé

* Erreur de transpilation dans geom.js : manque un return devant _super.prototype.getPathIterator.call dans getPathIterator (plusieurs fois !)  
* Erreur de transpilation du constructeur HashMap(Map) 
* Besoin de jszip-utils-ie.min.js ou pas ? Probablement seulement pour IE 9 donc non
* zip.js mieux organisé mais moins bien maintenu (possiblité de lire les fichiers locaux ?)
  erreur "File format is not recognized." sous Safari à l'appel de reader.getEntries
  difficulté à traiter plusieurs images sur leur onload
* Attention essayer de partager les coordonnées des sommets, des normales et des textures
* Besoin de cloner les modèles chargés ? oui
* Besoin de conserver les coordonnées une fois les buffers WebGL créés ? 
     Non, si on supprime de ModelManager un modèle supprimé du canvas 3D
* Gestion des faces single side view      
* Vérifier fichier sans structure
* repaint ne fonctionne pas bien sous FireFox et Safari : éviter les setTimeout
* Ne pas afficher les objets dont le nom commence par "sweethome3d_light"
* Créer un seul blob dans OBJLoader puisque load est réentrant ? Eviter plusieurs workers
* Supprimer les tableaux Javascript de coordonnées de texture / normales une fois les buffers de coordonnées WebGL créés (appel à disposeCoordinatesArrays())
* Vérifier si les appearances par défaut sont relues dans un worker : non
* Sur lettoCloud.zip, vérifier la triangularisation sur les extrémités du lit 
* Vérifier normales sur haut de contributions/dogHouse.zip, livre orange de contributions/smallbookshelves.zip, katorlegaz/exterior-door-07.zip
* Sur la niche et machines à laver Scopia, ouverture partiellement cachée par un triangle (pb triangularisation ou face de dos visible)
* Vérifier transparence small table avec embouts oranges
* Vérifier BD ouverte
* Vérifier event clavier 
* Vérifier affichage texture en matériau, generation tex coord, angle texture
* Gérer les formes g préfixées par sweethome3d_window
* Vérifier invisible objects (porte garage ex 7) 
* Vérifier côté de l'ascenseur ouvert
* Ajouter animation pour fluidifier déplacements au clavier
* Arrêt animation quand canvas non vu
* Repositionnement du canvas 3D après changement de taille de la fenêtre
* Ajouter param à viewmodel.js pour orienter le modèle (scopia/armchair1.zip)
* Pourquoi la transparence sur d'une texture retaillée ne fonctionne pas (voir livres.zip) ?
  NE PAS OUBLIER DE SUPPRIMER document.getElementById("result").src = canvas.toDataURL();
* Libérer instances JSZip, images, vertices, normals et text coords une fois le modèle chargé dans le viewer.
* Vérifier ambient
* Ne pas réduire taille texture ciel à 256x256
* Gestion ciel
* Gestion affichage SH3V avec overlay
* Gestion animation du logement
* Appeler abort sur pending XMLHttpRequest dans ZIPTools.clear 
* Lancer le worker dans un setTimeout pour laisser GC travailler ? Pas de différence :(
* Dans Chrome, mesurer mémoire utilisée avant toBinary, avant appel worker et dans appel worker
  http://stackoverflow.com/questions/23506064/how-do-you-detect-memory-limits-in-javascript (lancer Chrome avec --enable-memory-info)
* Vérifier position/hauteur overlayDiv sous Edge
* Autoriser "none", "default" ou autre pour navigationPanel
* Enregistrer les éléments dans le plug-in avec des classes pour chaque type
* Ajouter la gestion événementielle sur HomePieceOfFurniture dans HomeComponent3D
* Documenter params fichier HTML
* Picking   
* Besoin du champ parent dans Node3D ? Uniquement dans BranchGroup pour detach 
~ Donner accès dans l'API à l'instance de Home ? Réécrire plutôt viewHome() 
~ Une fois triangularisation corrigée, vérifier normales (générées ?) sur stroller et 308 CC, et déplacer évenutellement la génération de normales 
  (faut-il générer les normales après la triangularisation pour être sûr que le polygone est bien orienté et éclairé ? oui pour fireplace1 et lettoCould mais pas d'effet pour le stroller et 308 CC)
~ Erreur "Drawing without vertex attrib 0 array enabled forces the browser to do expensiv@e emulation work" dans FireFox sous Mac OS X
  (liée au coordonnées de texture pour les shape sans coordonnées de texture, la solution passe par un shader différent pour les géométries texturées et celles non texturées)
~ Gérer l'arrêt du téléchargement ou au moins ne pas montrer le résultat si deux téléchargements se chevauchent
~ Vérifier comment CLAMP_TO_EDGE fonctionne pour les textures non puissance de 2 répétées (par exemple sur Couch de Bendswap CC-0, Elevator Scopia, Marble table)
  -> Forcer les textures redimensionnées dans Sweet Home 3D dans des taille en puissance de 2
  http://stackoverflow.com/questions/3792027/webgl-and-the-power-of-two-image-size
  Voir si on peut détecter les circonstances d'utilisation d'une image de texture répétée ou non, pour éviter le calcul de la taille en puissance de 2, la perte en mémoire de l'image plus grande et de détail 
~ NormalGenerator ne fait pas les mêmes approximations sur frame2.zip 1.1 et squares.zip que OBJLoader#generateNormals. 
~ Révaluer le crease angle de NormalGenerator à 86° (cadre frame2.zip / squares.zip) ? bof, frame2.zip changé avec normales, préfère l'implémentation de la subdivision smooth dans group  
~ Transparence moins laiteuse (voir this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA); dans Canvavas3D / http://mrdoob.github.io/webgl-blendfunctions/blendfunc.html)
  -> multiplier RGB gl_FragColor par alpha aussi. Si la texture sur surface transparente est trop sombre, initialiser plutôt avec alpha
     fragmentColor = vec4(alpha, alpha, alpha, 1.);
~ Gestion des priorités d'affichage des objets transparents (vérifier les deux mannequins dans la vitrine de LaModePourTous) : Vraiment besoin ?    
~ Brillance trop forte en basse lumière (example4 en faible luminosité) -> multiplication de specularLightWeight par diffuseLightWeight mais pas convaincu que ce soit correct
~ Ajouter un appel à terminate sur les workers de OBJLoader dans ModelManager#clear ? Pas forcément car les workers peuvent être utilisées à nouveau
~ Revoir gestion de la progress bar avec viewModel ? Bug dans le navigateur ??? 
~ Ajouter attribut modulate à Appearance3D ? Ne semble pas utile car les OBJ ne sont pas modulés et tous les objets 3D générés ont une diffuseColor blanche 
~ Vérifier gestion gesture sous Chrome / Windows -> Ajout du panneau de navigation avec possiblité d'installer des raccourcis clavier
  http://stackoverflow.com/questions/14533002/gesturestart-event-analog-in-chrome-for-android
~ Vérifier que weight dans OBJLoader#generateNormals n'exagère pas la pondération sur portière gauche de 308 CC (apparemment NormalGenerator utilise plutôt des recherches d'arête en commun)
  poids utilisé en évitant de normaliser la normale calculée à la facette semble donner des résultats corrects. Code avec poids :
        var length = vec3.length(normal);
        if (length > 0) {
          var weight = Math.atan2(length, vec3.dot(vector1, vector2));
          vec3.scale(normal, normal, weight / length);
        }

- leftToRightOriented support en 3D ou pas ?

- Sols plus clairs / brillance et transparence différente / raison extension .zip plutôt que .sh3v 
- Intégrer main à HomeXMLFileRecorder pour générer les fichiers à la ligne de commande
- Supprimer fichier temporaire créé par DefaultHomeInputStream	
- Attention à détourner sweethome3d.com vers www.sweethome3d.com, ou trouver comment s'en passer

- Shape3D#removeGeometry à optimiser avec getBounds pour éviter recalcul des bounds tant que pas demandé

- Mieux gérer redimmensionnement Canvas3D pour toujours appeler updateViewportSize même si preferences est null dans HomeComponent3D
- Mieux gérer les erreurs d'accès au fichier sh3v dans le plug-in ? 
- Ne pas gérer les brillances sous certains iOS (très moche sous iPad)
- Choix de la propriété de l'objet HomeComponent3D associé au canvas 3D ?
- Listener de barre d'espace associé a window pour éviter le défilement du navigateur ? Au moins pour pour le viewer en overlay ?
- Ignorer les événements "COLOR", "TEXTURE", "MODEL_MATERIALS", "SHININESS", "POWER" + evt Wall, Room... dans TopCameraState#objectChangeListener (pareil côté Java) 
- Utiliser WeakMap pour ModelManager et TextureManager mais WeakMap ne semble pas capable de comparer ses keys avec equals 
  (nécessaire pour éviter les doublons pour les instances d'URLContent égaux) 
- Déplacer méthodes ZIPTools.isTranparentImage et ZIPTools.getScriptFolder dans une autre classe 
- Renomer le plug-in en "Export to HTML5 viewer plug-in" ?
- Param ignore cache
- Gestion choix caméras ?
- Gestion modules en Javascript ?
- Utiliser JSZip 3.0 pour asynchrone avec Promise dispose + API JSZip 2.6 pour version synchrone
- Pourquoi shininess ne fonctionne pas bien sous iOS pour SH3X (test "length(eyeDirection) <= 1.0" dans HTMLCanvas3D ne devrait pas être nécessaire) ?
- Ajouter attribut structure à Level et proposer l'export multiniveaux
- Changer l'API pour simplifier l'accès à l'instance de HomePreviewComponent, document.getElementById('viewerCanvas').homePreviewComponent ?
- Faire des weak references pour les listeners des pref AERIAL_VIEW_CENTERED_ON_SELECTION_ENABLED et NAVIGATION_PANEL_VISIBLE
- Vérifier comportement wheel sous FireFox (ev.preventDefault(); ne semble pas bloquer le scrolling dans la page)
- Ne pas interdire la gesture drag sur l'overlay pour pouvoir déplacer le canvas quand passage en paysage sur iOS ? Est-ce possible ? 
- Changer OBJLoader pour pouvoir stopper le chargement des OBJ en attente à partir de ModelManager.clear
- Ajouter un parent pour pouvoir remonter dans la hiérarchie et supprimer les géométries si aucun parent n'est une instance de BranchGroup 
  (n'y aurait-il pas des BranchGroup à remplacer par Group dans HomeComponent3D.java ?)
- Ne pas générer de fichier intermédiaire homeWithAllData si pas obligatoire (11% du temps de sauvegarde)
- Est-il possible de changer le comportement des html select sous iOS
- Ajouter playVideo
- Double-tap pour changer de point de vue
- Ajouter génération SVG / http://caniuse.com/#feat=svg
- Possibilité de supprimer les Canvas 2D utilisés après changement de taille des textures une fois leur binding effectué ?
- Forcer la lecture des images dans TextureManager.load et OBJLoader.prototype.loadTextureImages si synchronous est true
- Vérifier transparence bouteille Scopia remplie de marron et la bouteille de vin Scopia 
- Provoquer un reload d'un modèle 3D si sa géométrie a été disposed (ou supprimer le modèle de ModelManager dans HomeComponent3D quand il n'est plus utilisé par aucun HPOF3D)
- Besoin de détruire le context WebGL quand on quitte la page ? C'est possible ?
- Test sur un fichier OBJ avec data multilignes \,  nombres entiers, décimaux sans chiffre avant ., default materials, vn et sans vn, s off et s 1, polygons
- Double tap : le code suivant manque de la gestion de la gesture et ne fonctione pas sous Android
    if (("ontouchstart" in window)|| navigator.MaxTouchPoints > 0) {
      document.getElementById(canvasId).addEventListener("touchstart", function(ev) {
          var target = ev.target;
          if (!target.clickTimer) {
            target.clickTimer = setTimeout(function() {
                  delete target.clickTimer;
                }, 500);
          } else {
            clearTimeout(target.clickTimer);
            delete target.clickTimer;
            toggleCamera();
          }
        });
    }
- Pour transférer le texte OBJ plus rapidement au worker (gain de 50ms avec weepingWillow sous Firefox), utiliser transferable :
    var data = objEntry.asArrayBuffer();
    var message = {"objContent":data, "objEntryName":objEntry.name, "appearances":appearances};
    worker.postMessage(message, [data]);
  côté worker décoder data avec new TextDecoder('ascii').decode(data)
  Mais TextDecoder pas supporté sous Safari et IE. Aucun gain, après test sur example 7 avec Uint8ToString décrit
  http://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326
  -> réécrire parseOBJEntryScene et parseOBJEntryMaterials avec décodage binaire :-( 
- Test sur weepingWillow.zip avec worker : 13s Firefox / 11s Safari, sans worker : 6s Firefox / 15s Safari 
- Test OBJLoader sur weepingWillow.zip : 2105ms Firefox / 2273ms Chrome (web) / 1308ms Safari / 504 ms Java 8
- Création de contextes WebGL limités à 16 / page sous Safari OS X, 64 / page sous iPhone 6s
  http://stackoverflow.com/questions/9261258/multiple-programs-in-webgl-doesnt-work
- Paramètres antialiasing et autres à positionner à l'appel à getContext
  https://developer.mozilla.org/fr/docs/Web/API/HTMLCanvasElement/getContext


Syntaxe Javascript :
- Boucle for in :
  var i;
  for (var i in collection) {
    var item = collection [i];
  }
  à réserver pour les maps et préférer en général la classique boucle pour les tableaux : 
  for (var i = 0; i < collection.length; i++) {
    var item = collection [i];
  }
    
- Définition d'une classe :
  function MyClass(data) {
    // Champ d'instance
    this.data = data;
  }
  
  // Champ de classe
  MyClass.classData = {};
  
  // Méthode d'instance
  MyClass.prototype.getData = function(param) {
    return this.data;
  }
  
  // Méthode de classe
  MyClass.method = function(param) {
  }
  
- Héritage 
  function MySubClass(data1, data2) {
    // Appel du constructeur de la super classe
    MyClass.call(this, data1);
  }
  // Lien d'héritage
  MySubClass.prototype = Object.create(MyClass.prototype);
  MySubClass.prototype.constructor = MySubClass;
  
  MySubClass.prototype.getData = function(param) {
    // Appel d'une méthode de la super classe quand celle-ci est redéfinie
    MyClass.prototype.getData.call(this, param);
  }
  
- Initialisation d'un tableau : var tab = [a, b, c];
- Dans initialisation d'une map {a:a}, la clé indiquée devant : est forcément le texte et pas la valeur d'une variable (pas besoin de cotes)
- Expression régulière entre / / et test avec string.match(regex)
- Pas de surcharge
- Nécessité de toujours écrire this. pour un appel à une méthode ou un champ d'instance de sa propre classe, 
  difficile de prendre l'habitude et comme pas de compilateur, aucune erreur si on l'oublie pendant la traduction tant que pas exécuté 
- Méthode de classe et d'instance peuvent porter le même nom 
- Attention pas d'héritage des méthodes de classe, une méthode de classe doit être forcément appelée en la précédant de la classe dans laquelle elle est définie 
- Variables pas typées : difficulté à maintenir le code dans le temps 
- Aucun gain sous Firefox en utilisant l'équivalent d'une ArrayList à la place de push()
- Ne pas utiliser for ( in ) sur un tableau
- Attention à la date des infos trouvés sur Internet si lié à une version récente de navigateur, MDN bonne source pour suivre la compatilibité des navigateurs 
  (getBoundingClientRect même pas mentionné dans un article comme https://www.kirupa.com/html5/get_element_position_using_javascript.htm qui a l'air portant plutôt très complet)  
- Pas de variable locale final, si une variable de boucle (ou même une variable déclarée dans une boucle) est utilisée dans une callback créée dans la boucle, 
  la variable aura la dernière valeur qui lui a été affectée au moment de l'appel de la callbak ! -> utiliser une fonction avec un paramètre égal à la variable 
  (utiliser const plutôt que var ne crée pas de nouvelle copie sous Safari et const est refusé par IE10)
- Pas de méthode private en JavaScript donc si on définit dans une sous-classe une méthode de même signature que celle dans la super classe, on la redéfinit toujours contrairement aux méthodes private en Java
- Pas java.awt.geom, javax.swing.undo, java.text, java.util.ResourceBundle, java.util.zip
- Pour un portage comme Sweet Home 3D, quelques chances de trouver des bugs dans le code Java pendant la traduction + MAJ JSDoc force à faire les MAJ de la Javadoc -> meilleure qualité du programme Java
- Pas de typage, mais JSDoc permet de spécifier le type des paramètres et de retour, voire même pour les variable locales, information qui est utilisable par la complétion automatique d'Eclipse : ça motive pour ajouter ces commentaires !
  Minifying à mettre en place rapidement, ça n'est pas une compilation mais ça permet de repérer quelques erreurs non détectées par Eclipse
- Debugger très complet + profiling dans Chrome, debugger appareil iOS branché sous Safari, simulateur exécution sous iOS dans Chrome,
  mais pas de possibilité d'anticiper les OutOfMemory en Javascript et en cas de plantage, toutes les infos de debug sont perdues !
- Workers nécessaires pour le feedback utilisateur, mais beaucoup de temps perdu dans le transfert de données avec le thread principal et mémoire dupliquée 
  -> abandon des workers pour un simple time slice, car le travail est déjà bien réparti entre les coeurs du CPU même en n'utilisant que le thread principal !
- One of the main difficulties will be to handle nicely crashes that may happen in a web browser when a JavaScript program 
  can't obtain more memory to work, because such events can't be predicted in the current version of browsers. 
  If crashes can be tolerated for the 3D viewer where they just prevent you to view your file, you're going to accept 
  them much less easily if they happen after you added a nth object in your edited home, wondering each time it happens 
  what you lost among your last modifications and even if you'll be able to modify your home without crashing the program again.
- Attention ! JavaScript manipule tous les nombres floatants en double précision sauf pour les éléments d'un Float32Array. Ce gain de prévision peut malheureusement amener des mauvais surprises...  
- Centrer en CSS toujours aussi merdique !  
  
- Pas de String#startsWith et String#endsWith dans Safari
- Pas de , avant } dans un ensemble sous IE 8
- Browser Mode dans IE 11 à vérifier 
- Données transférées d'un Worker perdent leur prototype, i.e. leur classe et leurs méthodes !
  => préférer une méthode de classe clone plutôt qu'une méthode d'instance (mais on perd le polymorphisme)
- event, nom de la variable par défaut d'événement dans un on... 
- event.stopPropagation() pour éviter qu'un événement continue vers le parent
- clone() sur un tableau -> slice(0)
- System.currenttimemillis() -> Date.now()
- System.out.println() -> console.log()
- list1.addAll(list2) -> list1.push.apply(list1, list2)
- list1.add(index, item) -> list1.splice(index, 0, item)  
- list1.remove(index) -> list1.splice(index, 1)  
- list1.subList(fromIndex, toIndex) -> list1.slice(fromIndex, toIndex)
- java.util.Collections.reverse(list) -> list.reverse()
- Thread.dumpStack() -> console.log(new Error().stack)
- s instanceof String -> typeof(s) === 'string' || s instanceof String
- instanceof accepte en second opérande une variable à laquelle est affectée une classe !
- delete this [field]; et pas delete this.field; quand field est une variable
- Test sur variable : http://stackoverflow.com/questions/5515310/is-there-a-standard-function-to-check-for-null-undefined-or-blank-variables-in
- Gestion des événéments clavier avec window.addEventListener, pour rendre canvas focusable, lui ajouter l'attribut tabindex="1", focus() pour donner le focus au canvas
  getInputMap() semble possible d'être implémentée avec param WHEN_IN_FOCUSED_WINDOW et WHEN_FOCUSED  
  voir aussi http://stackoverflow.com/questions/1829586/how-do-i-give-an-html-canvas-the-keyboard-focus-using-jquery
  
- Adaptation Java -> Javascript (à améliorer pour garder les types de retour, voire les types des paramètres) 
  " *(public|private|protected) \w+ (\w+)\((\w+ )?"  -> ClassX.prototype.$2 = function(
  " */\*\*\R(\s*\*.*\R)*\s*\*/\R"  ->
  " *@Override\R"  -> 
  " *\* @since \d.*\R" ->
  "Property\.(\w+)\.name\(\)"  -> "$1"
  "( *)for \((\w+ ?\[?\]?) (\w+) : (.+\(\.*\))\) \{"  ->  $1var $3s = $4;\R$1for (var i = 0; i < $3s.length; i++) {\R$1  var $3 = $3s [i];
  " (float|int|boolean|String) " -> espace + var + espace
  "==" -> "==="
  " [^\.f]\w+\(" (pour repérer les appels de méthodes non précédés d'un identificateur, sauf si la méthode commence par un f)


- Commandes pour récupérer tools.jar d'OpenJDK8 sous Linux (version complète ...-b.. à récupérer avec "java -version") :
sudo apt-get install mercurial
hg clone -u jdk8u181-b13 http://hg.openjdk.java.net/jdk8u/jdk8u
cd jdk8u
sh get_source.sh
bash ./configure
make all
Résultat dans build/linux-x86_64-normal-server-release/images/j2sdk-image/lib/tools.jar

Pour exécuter ./configure sous macOS :
installer XCode 4
switch to Xcode 4 avec la commande "sudo xcode-select -switch /Applications/Developer/Xcode4.app"
et lancer "bash ./configure MAKE=/Applications/Developer/Xcode4.6.3.app/Contents/Developer/usr/bin/make"
mais coince plus loin car xcodebuild ne peut pas fonctionner :-(


Lancement Chrome avec utilisation fichiers "file:"
open /Applications/Utilitaires\ divers/Google\ Chrome.app --args --allow-file-access-from-files

  
- Search first parent with an id :

for (navigationPanelDiv = simulatedKeys [0].parentElement;
     navigationPanelDiv && (!navigationPanelDiv.hasAttribute || !navigationPanelDiv.hasAttribute("id")); 
     navigationPanelDiv = navigationPanelDiv.parentElement) {
}

- Affichage image générée en offscreen avec frame buffer 

  var c = document.createElement("canvas");
  c.width = this.pickingFrameBuffer.width;
  c.height = this.pickingFrameBuffer.height;
  var ctx = c.getContext("2d");
  for (var i = 0; i < this.pickingFrameBuffer.width; i++) {
    for (var j = 0; j < this.pickingFrameBuffer.height; j++) {
      ctx.fillStyle = "rgb(" + this.pickingFrameBuffer.colorMap[(i + j * this.pickingFrameBuffer.height) * 4] 
        + "," + this.pickingFrameBuffer.colorMap[(i + j * this.pickingFrameBuffer.height) * 4 + 1]
        + "," + this.pickingFrameBuffer.colorMap[(i + j * this.pickingFrameBuffer.height) * 4 + 2] + ")";
      ctx.fillRect(i, this.pickingFrameBuffer.height - 1 - j, 1, 1);
    }
  }
  document.getElementById("test").src = c.toDataURL();

- PlanComponent avec double buffer (+ delete this.doubleBuffer; dans revalidate)

PlanComponent.prototype.repaint = function () {
  var _this = this;
  if (!this.canvasNeededRepaint) {
    this.canvasNeededRepaint = true;
    requestAnimationFrame(function () {
        if (_this.canvasNeededRepaint) {
          if (!_this.doubleBuffer) {
            _this.doubleBuffer = document.createElement("canvas");
            _this.doubleBuffer.width = _this.canvas.width;
            _this.doubleBuffer.height = _this.canvas.height;
          }
          _this.canvasNeededRepaint = false;
          _this.paintComponent(new Graphics2D(_this.doubleBuffer));
          _this.getGraphics().drawImage(_this.doubleBuffer, 0, 0);
          _this.paintComponent(_this.getGraphics());
        }
      });
  }
};    

- Génération de home.sh3v avec références aux modèles libres :
Voir /SweetHome3DJS/other/test/testExport/ExportToSH3V.java    
    
 - Full screen de la vue 3D :
body {
  overflow-x: hidden;
  overflow-y: hidden;
  margin: 0;
}
#viewerCanvas {
  width: 100%;
  height: 100%;
}
#viewerNavigationDiv {
  position: absolute; 
  bottom: 5px;
  left: 5px;
}

- Gestion de la fin de session :

package com.eteks.sweethome3d.io;

import java.io.File;
import java.util.Enumeration;
import javax.servlet.annotation.WebListener;
import javax.servlet.http.HttpSessionEvent;

@WebListener
public class SessionEndListener {
  public void sessionDestroyed(final HttpSessionEvent ev) {
    // Remove other files that may have been ignored when pages were closed
    for (Enumeration<String> it = ev.getSession().getAttributeNames(); it.hasMoreElements(); ) {
      new File((String)ev.getSession().getAttribute(it.nextElement())).delete();
    }
  }
}

- Génération des bibliothèques pour le serveur (préférer OnlineJSONCatalogsGenerator.java pour n'obtenir qu'un seul fichier) :
javac -cp tools/json/lib/json-20190722.jar -d tools/json/src tools/json/src/com/eteks/sweethome3d/json/PropertiesToJson.java

java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../SweetHome3D/src /com/eteks/sweethome3d/io/DefaultFurnitureCatalog lib/resources DefaultFurnitureCatalog "" 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../3DModels/blendswap-cc-0 PluginFurnitureCatalog lib/resources 3DModels-BlendSwap-CC-0 blendswap-cc-0 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../3DModels/blendswap-cc-by PluginFurnitureCatalog lib/resources 3DModels-BlendSwap-CC-BY blendswap-cc-by 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../3DModels/contributions PluginFurnitureCatalog lib/resources 3DModels-Contributions contributions 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../3DModels/katorlegaz PluginFurnitureCatalog lib/resources 3DModels-KatorLegaz katorlegaz 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../3DModels/lucapresidente PluginFurnitureCatalog lib/resources 3DModels-LucaPresidente lucapresidente 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../3DModels/reallusion PluginFurnitureCatalog lib/resources 3DModels-Reallusion reallusion 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../3DModels/scopia PluginFurnitureCatalog lib/resources 3DModels-Scopia scopia 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../3DModels/trees PluginFurnitureCatalog lib/resources 3DModels-Trees contributions 

java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../SweetHome3D/src com/eteks/sweethome3d/io/DefaultTexturesCatalog lib/resources DefaultTexturesCatalog "" 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../Textures/contributions PluginTexturesCatalog lib/resources Textures-Contributions contributions 
java -cp tools/json/lib/json-20190722.jar:tools/json/src com/eteks/sweethome3d/json/PropertiesToJson ../Textures/eteks-scopia PluginTexturesCatalog lib/resources Textures-eTeksScopia eteks-scopia 
    
A utiliser ensuite dans writeHomeEdits.jsp :
        new ServerUserPreferences(
	         new URL [] {new URL(serverBaseUrl, "lib/resources/DefaultFurnitureCatalog.json"),
	         			 new URL(serverBaseUrl, "lib/resources/3DModels-BlendSwap-CC-0.json"),
	         			 new URL(serverBaseUrl, "lib/resources/3DModels-BlendSwap-CC-BY.json"), 
	         			 new URL(serverBaseUrl, "lib/resources/3DModels-Contributions.json"), 
	         			 new URL(serverBaseUrl, "lib/resources/3DModels-KatorLegaz.json"), 
	         			 new URL(serverBaseUrl, "lib/resources/3DModels-LucaPresidente.json"), 
	         			 new URL(serverBaseUrl, "lib/resources/3DModels-Reallusion.json"),
	         			 new URL(serverBaseUrl, "lib/resources/3DModels-Scopia.json"),
	         			 new URL(serverBaseUrl, "lib/resources/3DModels-Trees.json")}, 
	         new URL(serverBaseUrl, "models"),
	         new URL [] {new URL(serverBaseUrl, "lib/resources/DefaultTexturesCatalog.json"),
	         			 new URL(serverBaseUrl, "lib/resources/Textures-Contributions.json"),
	         			 new URL(serverBaseUrl, "lib/resources/Textures-eTeksScopia.json")}, 
	         new URL(serverBaseUrl, "textures));

et éventuellement dans DefautlUserPreferences :
		new DefaultFurnitureCatalog( 
						["lib/resources/DefaultFurnitureCatalog.json",
	         			 "lib/resources/3DModels-BlendSwap-CC-0.json",
	         			 "lib/resources/3DModels-BlendSwap-CC-BY.json", 
	         			 "lib/resources/3DModels-Contributions.json", 
	         			 "lib/resources/3DModels-KatorLegaz.json", 
	         			 "lib/resources/3DModels-LucaPresidente.json", 
	         			 "lib/resources/3DModels-Reallusion.json",
	         			 "lib/resources/3DModels-Scopia.json",
	         			 "lib/resources/3DModels-Trees.json"], "/models")


 Historique
 ----------
 v 2.0
 - Generated model and java.awt.geom JavaScript classes from Java source code with JSweet
 
 v 1.2
 - Added support for multitouch under Android and Windows 
 - Optimized handling of lines
 - Added support for HomeObject superclass
 - Fixed typos on "longitude" attribute instead of "logitude" for <compass> element, 
   on "areaVisible" attribute instead of "nameVisible" for <room> element, 
   on "fontSize" attribute instead of "size" on <textStyle> element, 
   on element <text> instead of <Text>, 
   "wallsAlpha" attribute of <environment> default value set to 0 instead of 1, 
   "thickness" attribute of <polyline> element set to 1 instead of 0 
  
 v 1.1 (05/05/2016)
 - Added getClosestItemAt to handle picking with all objects being pickable except door or window transparent parts
 - Added the required listeners to update viewport size when the window where the canvas is displayed is resized
 - Took into account page offset to set the position of the navigation panel
 - Stored home items in user data of 3D nodes
 - Notified progress of models loading when home doesn't contain furniture
 - Set zIndex of navigation panel according to the zIndex of its parents
  
 v 1.0.3
 - Added missing selection events management
 - Fixed issues that could happen in the color profile of some reduced texture images (bug plug-in)
 
 v 1.0.2 (04/21/2016)
 - Fixed position of the navigation panel when a canvas isn't set at an absolute position
 - Fixed an issue that provoked the animation of home when roundsPerMinute parameter was omitted
 - Updated HomeRecorder and HomePreviewComponent to make them more easily extendable
 - Fixed Home#copyHomeData when home has levels
 - Added missing objects in calls in TextStyle, HomeEnvironment, UserPreferences, LengthUnit, CatalogTexture classes
 - Added precise comparison on complex objects to avoid firing events uselessly
 - Fixed the management of updated objects after changes on more than a piece
 - Fixed capability test in Node3D
 
 v 1.0.1 (04/19/2016)
- Fixed class testing under IE 11
- Added return in PropertyChangeSupport#getPropertyChangeListeners
 
 v 1.0 (04/18/2016)
 